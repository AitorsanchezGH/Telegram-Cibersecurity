"""
M√≥dulo para gestionar la conexi√≥n y operaciones con MongoDB Atlas
"""
import os
from datetime import datetime
from typing import Dict, List, Optional
from pymongo import MongoClient
from pymongo.collection import Collection
from pymongo.database import Database
import logging

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MongoDBManager:
    """Gestor de conexi√≥n y operaciones con MongoDB Atlas"""
    
    def __init__(self, mongo_uri: str, db_name: str):
        """
        Inicializa la conexi√≥n con MongoDB Atlas
        
        Args:
            mongo_uri: URI de conexi√≥n a MongoDB Atlas
            db_name: Nombre de la base de datos
        """
        self.client: Optional[MongoClient] = None
        self.db: Optional[Database] = None
        self.messages_collection: Optional[Collection] = None
        self.mongo_uri = mongo_uri
        self.db_name = db_name
        
    def connect(self) -> bool:
        """
        Establece conexi√≥n con MongoDB Atlas
        
        Returns:
            bool: True si la conexi√≥n es exitosa, False en caso contrario
        """
        try:
            self.client = MongoClient(self.mongo_uri)
            # Verificar conexi√≥n
            self.client.admin.command('ismaster')
            self.db = self.client[self.db_name]
            self.messages_collection = self.db.messages
            logger.info(f"‚úÖ Conectado exitosamente a MongoDB Atlas - DB: {self.db_name}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error conectando a MongoDB: {e}")
            return False
    
    def disconnect(self):
        """Cierra la conexi√≥n con MongoDB"""
        if self.client:
            self.client.close()
            logger.info("üîå Desconectado de MongoDB Atlas")
    
    def insert_message(self, message_data: Dict) -> Optional[str]:
        """
        Inserta un mensaje en la colecci√≥n
        
        Args:
            message_data: Diccionario con los datos del mensaje
            
        Returns:
            str: ID del documento insertado o None si hay error
        """
        try:
            # Agregar timestamp si no existe
            if 'timestamp' not in message_data:
                message_data['timestamp'] = datetime.utcnow()
            
            result = self.messages_collection.insert_one(message_data)
            logger.info(f"üìù Mensaje guardado con ID: {result.inserted_id}")
            return str(result.inserted_id)
        except Exception as e:
            logger.error(f"‚ùå Error insertando mensaje: {e}")
            return None
    
    def create_indexes(self):
        """Crea √≠ndices para b√∫squedas eficientes"""
        try:
            # √çndice por timestamp para consultas temporales
            self.messages_collection.create_index("timestamp")
            # √çndice por chat_id para filtrar por chat
            self.messages_collection.create_index("chat_id")
            # √çndice por sender_id para an√°lisis de usuarios
            self.messages_collection.create_index("sender_id")
            # √çndice compuesto para b√∫squedas avanzadas
            self.messages_collection.create_index([("chat_id", 1), ("timestamp", -1)])
            logger.info("üìä √çndices creados exitosamente")
        except Exception as e:
            logger.error(f"‚ùå Error creando √≠ndices: {e}")
    
    def get_messages_count(self) -> int:
        """
        Obtiene el n√∫mero total de mensajes almacenados
        
        Returns:
            int: N√∫mero de mensajes
        """
        try:
            return self.messages_collection.count_documents({})
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo count: {e}")
            return 0
    
    def test_connection(self) -> bool:
        """
        Prueba la conexi√≥n insertando un documento de test
        
        Returns:
            bool: True si el test es exitoso
        """
        try:
            test_doc = {
                "test": True,
                "timestamp": datetime.utcnow(),
                "message": "Test de conexi√≥n"
            }
            result = self.messages_collection.insert_one(test_doc)
            # Eliminar el documento de test
            self.messages_collection.delete_one({"_id": result.inserted_id})
            logger.info("‚úÖ Test de conexi√≥n exitoso")
            return True
        except Exception as e:
            logger.error(f"‚ùå Test de conexi√≥n fall√≥: {e}")
            return False